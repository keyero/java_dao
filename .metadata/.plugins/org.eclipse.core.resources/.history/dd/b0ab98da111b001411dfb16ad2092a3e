分支流程控制

if(布尔表达式/分支条件){
  //语句块
}

if(布尔表达式/分支条件){
  //语句块1
}else{
  //语句块2
}

if(条件1){
  //语句块1
}else if(条件2){
  //语句块2
}else if(条件3){
  //语句块3
}

 1) 尽量使用肯定条件，可以减少逻辑思考错误
 2) 减少使用else
 3) 减少嵌套层次，一般不要超过2层
 4) 语句块不要超过一个屏幕！
 5) 严格遵守缩进规则！
 
switch(整数条件){
  case 常量:   (break;)
  case 常量:
  default: 
}
  
循环流程控制 
  for  while   do...while
  
 1)for 经典用法: 与次数，连续变化的数列有关的循环
    for(初始化;循环条件;递增){
  	  循环体
    }
  
 2)for可以替代任何循环
  2.1) 死循环 
   for(;;){
   }
   
   for(;true;){
   }
  
  2.2) 
   for(;循环条件;){
   }
  
  
 for while do...while 比较
 1) for 常用，“经典使用方式”与固定次数有关循环处理
 ２2) for 可以替代其它两种循环
   2.1) for(;循环条件;){} 替代 while(循环条件){}
   2.2) 死循环 for(;;){} 替代  while(true){}
   2.3) for(;;){ if(循环条件) break; } 替代
      do...while(循环条件);
   有些程序员只使用for解决问题
 3) while 循环用于在循环体开始时候判断循环条件
 4) do ... while 循环用于在循环体结束时候判断循环条件
 5) 在其他情况下使用 死循环！在适当的条件时候使用break
 
数组：类型一致的一组东西

 数组变量：是标识数组的变量名，是引用类型变量
 数组：是全部元素的集合，是内存中的连续存储单元
 数组元素：是数组中每个具体的元素
 
如:
 int[] ary = new int[3];
 
 ary 是数组变量
 new int[3] 是数组
 ary[0] 是数组元素
 
数组的语法
 
 1) 数组变量的声明
 2) 数组的创建(内存分配)
 3) 数组元素的访问(读写)

 













 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  